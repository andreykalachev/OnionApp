// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnionApp.Persistence.Context;

namespace OnionApp.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191202090908_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnionApp.Domain.Models.Entities.AddressType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code1");

                    b.Property<string>("Code2");

                    b.Property<string>("Code3");

                    b.Property<string>("Code4");

                    b.Property<string>("Code5");

                    b.Property<string>("Code6");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool?>("Flag1");

                    b.Property<bool?>("Flag2");

                    b.Property<bool?>("Flag3");

                    b.Property<bool?>("Flag4");

                    b.Property<bool?>("IsDisabled");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentId");

                    b.Property<DateTime?>("Timestamp1");

                    b.Property<DateTime?>("Timestamp2");

                    b.Property<DateTime?>("Timestamp3");

                    b.Property<DateTime?>("Timestamp4");

                    b.Property<double?>("Value1");

                    b.Property<double?>("Value2");

                    b.Property<double?>("Value3");

                    b.Property<double?>("Value4");

                    b.HasKey("Id");

                    b.ToTable("tblAddressType");
                });

            modelBuilder.Entity("OnionApp.Domain.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code1");

                    b.Property<string>("Code2");

                    b.Property<string>("Code3");

                    b.Property<string>("Code4");

                    b.Property<string>("Code5");

                    b.Property<string>("Code6");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool?>("Flag1");

                    b.Property<bool?>("Flag2");

                    b.Property<bool?>("Flag3");

                    b.Property<bool?>("Flag4");

                    b.Property<bool?>("IsDisabled");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentId");

                    b.Property<DateTime?>("Timestamp1");

                    b.Property<DateTime?>("Timestamp2");

                    b.Property<DateTime?>("Timestamp3");

                    b.Property<DateTime?>("Timestamp4");

                    b.Property<double?>("Value1");

                    b.Property<double?>("Value2");

                    b.Property<double?>("Value3");

                    b.Property<double?>("Value4");

                    b.HasKey("Id");

                    b.ToTable("tblCategory");
                });

            modelBuilder.Entity("OnionApp.Domain.Models.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid?>("DefaultVatId");

                    b.Property<string>("Description");

                    b.Property<string>("ISO3166_2");

                    b.Property<string>("ISO3166_3");

                    b.Property<bool?>("IsDefault");

                    b.Property<bool?>("IsDisabled");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("PostalCodeFormat");

                    b.HasKey("Id");

                    b.ToTable("tblCountry");
                });

            modelBuilder.Entity("OnionApp.Domain.Models.Entities.Relation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArrivalBetween");

                    b.Property<DateTime?>("ArrivalBetweenAnd");

                    b.Property<string>("ArrivalName");

                    b.Property<Guid?>("ArrivalTimeSlotIdOnFridays");

                    b.Property<Guid?>("ArrivalTimeSlotIdOnMondays");

                    b.Property<Guid?>("ArrivalTimeSlotIdOnSaturdays");

                    b.Property<Guid?>("ArrivalTimeSlotIdOnSundays");

                    b.Property<Guid?>("ArrivalTimeSlotIdOnThursdays");

                    b.Property<Guid?>("ArrivalTimeSlotIdOnTuesdays");

                    b.Property<Guid?>("ArrivalTimeSlotIdOnWednesdays");

                    b.Property<bool?>("ArrivalTimeSlotsAreAllEqual");

                    b.Property<string>("BankAccount");

                    b.Property<string>("BankBic");

                    b.Property<string>("BankName");

                    b.Property<double?>("CalculateMinimalPrice");

                    b.Property<double?>("CalculateMinimalPriceForCollecting");

                    b.Property<bool?>("CalculatePriceBasedOnAmount");

                    b.Property<bool?>("CalculatePriceBasedOnAmountForCollecting");

                    b.Property<bool?>("CalculatePriceBasedOnDistance");

                    b.Property<bool?>("CalculatePriceBasedOnDistanceForCollecting");

                    b.Property<bool?>("CalculatePriceBasedOnEpq");

                    b.Property<bool?>("CalculatePriceBasedOnEpqForCollecting");

                    b.Property<bool?>("CalculatePriceBasedOnLoadingMeters");

                    b.Property<bool?>("CalculatePriceBasedOnLoadingMetersForCollecting");

                    b.Property<bool?>("CalculatePriceBasedOnPositions");

                    b.Property<bool?>("CalculatePriceBasedOnPositionsForCollecting");

                    b.Property<bool?>("CalculatePriceBasedOnTonne");

                    b.Property<bool?>("CalculatePriceBasedOnTonneForCollecting");

                    b.Property<bool?>("CalculatePriceBasedOnVolume");

                    b.Property<bool?>("CalculatePriceBasedOnVolumeForCollecting");

                    b.Property<bool?>("CalculatePriceBasedOnWeight");

                    b.Property<bool?>("CalculatePriceBasedOnWeightForCollecting");

                    b.Property<bool?>("CalculatePriceByDistance");

                    b.Property<bool?>("CalculatePriceByDistanceForCollecting");

                    b.Property<bool?>("CalculatePriceByFixed");

                    b.Property<bool?>("CalculatePriceByFixedForCollecting");

                    b.Property<double?>("CalculatePriceByFixedPrice");

                    b.Property<double?>("CalculatePriceByFixedPriceForCollecting");

                    b.Property<bool?>("CalculatePriceByPriceList");

                    b.Property<bool?>("CalculatePriceByPriceListForCollecting");

                    b.Property<bool?>("CalculatePriceManually");

                    b.Property<bool?>("CalculatePriceManuallyForCollecting");

                    b.Property<string>("CarrierCode");

                    b.Property<string>("ChamberOfCommerce");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CustomerCode");

                    b.Property<string>("DebtorNumber");

                    b.Property<string>("DefaultCity");

                    b.Property<string>("DefaultCountry");

                    b.Property<string>("DefaultPostalCode");

                    b.Property<string>("DefaultStreet");

                    b.Property<DateTime?>("DepartureBetween");

                    b.Property<DateTime?>("DepartureBetweenAnd");

                    b.Property<string>("DepartureName");

                    b.Property<Guid?>("DepartureTimeSlotIdOnFridays");

                    b.Property<Guid?>("DepartureTimeSlotIdOnMondays");

                    b.Property<Guid?>("DepartureTimeSlotIdOnSaturdays");

                    b.Property<Guid?>("DepartureTimeSlotIdOnSundays");

                    b.Property<Guid?>("DepartureTimeSlotIdOnThursdays");

                    b.Property<Guid?>("DepartureTimeSlotIdOnTuesdays");

                    b.Property<Guid?>("DepartureTimeSlotIdOnWednesdays");

                    b.Property<bool?>("DepartureTimeSlotsAreAllEqual");

                    b.Property<Guid?>("DigitalFreightDocumentEMailTemplateId");

                    b.Property<string>("EMailAddress");

                    b.Property<string>("EmergencyNumber");

                    b.Property<string>("FaxNumber");

                    b.Property<int?>("Flags");

                    b.Property<string>("FullName");

                    b.Property<string>("GeneralLedgerAccount");

                    b.Property<string>("GeographicalRegions");

                    b.Property<string>("IMAddress");

                    b.Property<int?>("InvoiceDateGenerationOptions");

                    b.Property<string>("InvoiceEMailAddress");

                    b.Property<int?>("InvoiceGroupByOptions");

                    b.Property<string>("InvoiceGroupByTransportOrderColumnName");

                    b.Property<string>("InvoiceTo");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool?>("IsMe");

                    b.Property<bool?>("IsTemporary");

                    b.Property<string>("MobileNumber");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentRelationId");

                    b.Property<double?>("PaymentTerm");

                    b.Property<bool?>("PaymentViaAutomaticDebit");

                    b.Property<Guid?>("PriceListId");

                    b.Property<Guid?>("PriceListIdForCollecting");

                    b.Property<string>("PriceListName");

                    b.Property<string>("PriceListNameForCollecting");

                    b.Property<string>("Remarks");

                    b.Property<bool?>("SendDigitalFreightDocumentsByEMail");

                    b.Property<bool?>("SendFreightDocumentsAlongWithInvoice");

                    b.Property<bool?>("SendFreightStatusUpdateByEMail");

                    b.Property<bool?>("SendInvoiceDigital");

                    b.Property<string>("SkypeAddress");

                    b.Property<string>("SupplyNumber");

                    b.Property<string>("TelephoneNumber");

                    b.Property<Guid?>("ThirdPartyToUseForInvoicing");

                    b.Property<Guid?>("TransportUnitTransactionOverviewTextTemplateId");

                    b.Property<string>("Url");

                    b.Property<Guid?>("VatId");

                    b.Property<string>("VatName");

                    b.Property<string>("VatNumber");

                    b.Property<string>("VendorNumber");

                    b.HasKey("Id");

                    b.ToTable("tblRelation");
                });

            modelBuilder.Entity("OnionApp.Domain.Models.Entities.RelationAddress", b =>
                {
                    b.Property<Guid>("RelationId");

                    b.Property<Guid>("AddressTypeId");

                    b.Property<string>("Building");

                    b.Property<string>("City");

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("CountryName");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("Number");

                    b.Property<string>("NumberSuffix");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Province");

                    b.Property<string>("Street");

                    b.HasKey("RelationId");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("tblRelationAddress");
                });

            modelBuilder.Entity("OnionApp.Domain.Models.Entities.RelationCategory", b =>
                {
                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("RelationId");

                    b.HasKey("CategoryId", "RelationId");

                    b.HasIndex("RelationId");

                    b.ToTable("tblRelationCategory");
                });

            modelBuilder.Entity("OnionApp.Domain.Models.Entities.RelationAddress", b =>
                {
                    b.HasOne("OnionApp.Domain.Models.Entities.AddressType", "Type")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnionApp.Domain.Models.Entities.Relation", "Relation")
                        .WithOne("RelationAddress")
                        .HasForeignKey("OnionApp.Domain.Models.Entities.RelationAddress", "RelationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnionApp.Domain.Models.Entities.RelationCategory", b =>
                {
                    b.HasOne("OnionApp.Domain.Models.Entities.Category", "Category")
                        .WithMany("RelationCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnionApp.Domain.Models.Entities.Relation", "Relation")
                        .WithMany("RelationCategories")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
